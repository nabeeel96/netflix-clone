{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","base_url","Row","_ref","title","fetchUrl","isLargeRow","_useState","useState","_useState2","Object","slicedToArray","movies","setMovies","_useState3","_useState4","trailerUrl","setTrailerUrl","useEffect","_fetchData","asyncToGenerator","regenerator_default","a","mark","_callee","request","wrap","_context","prev","next","get","sent","data","results","abrupt","stop","apply","this","arguments","fetchData","react_default","createElement","className","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","concat","src","poster_path","backdrop_path","alt","index_esm","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","undefined","overview","style","backgroundSize","backgroundImage","backdropPosition","original_name","substr","Navbar","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","src_Navbar","src_Banner","src_Row","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.ea6ac613.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n// base url to make requests to the movie database\r\nconst instance = axios.create({\r\n  baseURL: 'https://api.themoviedb.org/3',\r\n});\r\n\r\nexport default instance;\r\n","import React, { useEffect, useState } from 'react';\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\nimport axios from './axios';\r\nimport './Row.css';\r\n\r\nconst base_url = 'https://image.tmdb.org/t/p/original/';\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState('');\r\n  // A snippet of code which runs based on a specific condition/variable\r\n  const opts = {\r\n    height: '390',\r\n    width: '100%',\r\n    playerVars: {\r\n      // https://developers.google.com/youtube/player_parameters\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  const handleClick = (movie) => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl('');\r\n    } else {\r\n      movieTrailer((movie && movie.name) || '')\r\n        .then((url) => {\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParams.get('v'));\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  return (\r\n    <div className='row'>\r\n      <h2>{title}</h2>\r\n      <div className='row__posters'>\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            onClick={() => {\r\n              handleClick(movie);\r\n            }}\r\n            className={`row__poster ${isLargeRow && 'row__posterLarge'} `}\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY = '3bb7508e1a63946c25edda38ea13082b';\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;\r\n","import React, { useEffect, useState } from 'react';\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport './Banner.css';\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState(null);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchNetflixOriginals);\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (movie != undefined) console.log(movie.overview);\r\n  }, [movie]);\r\n\r\n  function truncate(str, n) {\r\n    return str.length > n ? str.substr(0, n - 1) + '...' : str;\r\n  }\r\n\r\n  return (\r\n    <header\r\n      className='banner'\r\n      style={{\r\n        backgroundSize: 'cover',\r\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${\r\n          movie && movie.backdrop_path\r\n        }\")`,\r\n        backdropPosition: 'center center',\r\n      }}\r\n    >\r\n      <div className='banner__contents'>\r\n        <h1 className='banner__title'>\r\n          {(movie && movie.title) ||\r\n            (movie && movie.name) ||\r\n            (movie && movie.original_name)}\r\n        </h1>\r\n\r\n        <div className='banner__buttons'>\r\n          <button className='banner__button'>Play</button>\r\n          <button className='banner__button'>My List</button>\r\n        </div>\r\n        <h1 className='banner__description'>\r\n          {movie && truncate(movie.overview, 150)}\r\n        </h1>\r\n      </div>\r\n      <div className='banner--fadeBottom' />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Navbar.css';\r\n\r\nfunction Navbar() {\r\n  const [show, handleShow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', () => {\r\n      if (window.scrollY > 100) {\r\n        handleShow(true);\r\n      } else handleShow(false);\r\n    });\r\n    return () => {\r\n      window.removeEventListener('scroll');\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`nav ${show && 'nav__black'}`}>\r\n      <img\r\n        className='nav__logo'\r\n        src='http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png'\r\n        alt='Netflix Logo'\r\n      />\r\n      <img\r\n        className='nav__avatar'\r\n        src='https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png'\r\n        alt='Netflix Avatar'\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner';\nimport Navbar from './Navbar';\n\nfunction App() {\n  return (\n    <div className='app'>\n      <Navbar />\n      <Banner />\n      <Row\n        title='NETFLIX ORIGINALS'\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title='Trending Now' fetchUrl={requests.fetchTrending} />\n      <Row title='Top Rated' fetchUrl={requests.fetchTopRated} />\n      <Row title='Action Movies' fetchUrl={requests.fetchActionMovies} />\n      <Row title='Comedy Movies' fetchUrl={requests.fetchComedyMovies} />\n      <Row title='Horror Movies' fetchUrl={requests.fetchHorrorMovies} />\n      <Row title='Romance Movies' fetchUrl={requests.fetchRomanceMovies} />\n      <Row title='Documentaries' fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}